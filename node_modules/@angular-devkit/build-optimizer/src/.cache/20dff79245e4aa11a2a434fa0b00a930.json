{"remainingRequest":"/Users/raphaelpfeifer/projetos/alurapic/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/raphaelpfeifer/projetos/alurapic/node_modules/jwt-decode/lib/atob.js","dependencies":[{"path":"/Users/raphaelpfeifer/projetos/alurapic/node_modules/jwt-decode/lib/atob.js","mtime":1672148857090},{"path":"/Users/raphaelpfeifer/projetos/alurapic/node_modules/cache-loader/dist/cjs.js","mtime":1664939892012},{"path":"/Users/raphaelpfeifer/projetos/alurapic/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1664939892278}],"contextDependencies":[],"result":["/**\n * The code was extracted from:\n * https://github.com/davidchambers/Base64.js\n */\n\nvar chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\nfunction InvalidCharacterError(message) {\n  this.message = message;\n}\n\nInvalidCharacterError.prototype = new Error();\nInvalidCharacterError.prototype.name = 'InvalidCharacterError';\n\nfunction polyfill (input) {\n  var str = String(input).replace(/=+$/, '');\n  if (str.length % 4 == 1) {\n    throw new InvalidCharacterError(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n  }\n  for (\n    // initialize result and counters\n    var bc = 0, bs, buffer, idx = 0, output = '';\n    // get next character\n    buffer = str.charAt(idx++);\n    // character found in table? initialize bit storage and add its ascii value;\n    ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,\n      // and if not first of each 4 characters,\n      // convert the first 8 bits to one ascii character\n      bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0\n  ) {\n    // try to find character in table (0-63, not found => -1)\n    buffer = chars.indexOf(buffer);\n  }\n  return output;\n}\n\n\nmodule.exports = typeof window !== 'undefined' && window.atob && window.atob.bind(window) || polyfill;\n",null]}